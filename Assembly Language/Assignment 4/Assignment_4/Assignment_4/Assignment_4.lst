Microsoft (R) Macro Assembler Version 14.27.29111.0	    04/20/21 21:19:45
Assignment_4.asm					     Page 1 - 1


				; Gabriel Coyote
				; 4/14/2021
				; Assignment #4

				; Develop four procedures for performing basic string operations (concat, repetitation, lower & upper-case)

				; Describe your algorithm/pseudocode/methodology
				;				 I stored the Original OFFSET of the register into another register, before altering anything, then return the OFFSET back to EDI
				; For strcat ... I copyied the string1 up until the null terminator, from there copy the string2 into newString
				; For strrep ... I just 'cmp' to jump if there are no more reptitions, else repeat the string, I used EBX as a loop counter for how many strings to read/copy
				; For strlower ..I check to see if the readed char is a uppercase letter based on hex values, if it's upper change it to lower and store it, else store char
				; For strupperr .I check to see if the readed char is a lowercase letter based on hex values, if it's lower change it to upper and store it, else store char

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


 00000000			.data
 00000000 59 6F 75 20 65		textString BYTE "You entered the string: "
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 73 74 72 69
	   6E 67 3A 20
 00000018  00000032 [			inputString BYTE 50 DUP(0)
	    00
	   ]
 0000004A 20 66 6F 72 20		hardcodeString BYTE " for CS2350. ", 0
	   43 53 32 33 35
	   30 2E 20 00
 00000058  000001F4 [			newString BYTE 500 DUP(0)
	    00
	   ]
					
 0000024C 45 6E 74 65 72		prompt BYTE "Enter a string to manipulate: ",0
	   20 61 20 73 74
	   72 69 6E 67 20
	   74 6F 20 6D 61
	   6E 69 70 75 6C
	   61 74 65 3A 20
	   00
 0000026B 50 6F 73 74 20		msg1 BYTE "Post Concatenation: ",0
	   43 6F 6E 63 61
	   74 65 6E 61 74
	   69 6F 6E 3A 20
	   00
 00000280 50 6F 73 74 20		msg2 BYTE "Post Repetition:    ",0
	   52 65 70 65 74
	   69 74 69 6F 6E
	   3A 20 20 20 20
	   00
 00000295 50 6F 73 74 20		msg3 BYTE "Post Lowercase:     ",0
	   4C 6F 77 65 72
	   63 61 73 65 3A
	   20 20 20 20 20
	   00
 000002AA 50 6F 73 74 20		msg4 BYTE "Post Uppercase:     ",0
	   55 70 70 65 72
	   63 61 73 65 3A
	   20 20 20 20 20
	   00
					
					; Place your additional memory operands below (if any)
 000002BF 4D 59 20 4E 41		myName BYTE "MY NAME:            Gabriel Coyote  R11600156",0
	   4D 45 3A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   47 61 62 72 69
	   65 6C 20 43 6F
	   79 6F 74 65 20
	   20 52 31 31 36
	   30 30 31 35 36
	   00
 00000000			.code
 00000000			main PROC																; DO NOT CHANGE THE CODE WITHIN THE MAIN PROCEDURE.
					; Prompt the user for string input (50 character maximum)
 00000000  BA 0000024C R		mov edx, OFFSET prompt
 00000005  E8 00000000 E		call WriteString

					; Read in the user's response
 0000000A  BA 00000018 R		mov edx, OFFSET inputString
 0000000F  B9 00000032			mov ecx, SIZEOF inputString
 00000014  E8 00000000 E		call ReadString

					; Print the user's response to the screen.
 00000019  BA 00000000 R		mov edx, OFFSET textString
 0000001E  E8 00000000 E		call WriteString
 00000023  E8 00000000 E		call Crlf			; Print end line character.
					
					; -------------------------------------------------------------
					; Code block for calling strcat and printing results to screen.
 00000028  BF 00000058 R		mov edi, OFFSET newString
 0000002D  BE 00000018 R		mov esi, OFFSET inputString
 00000032  BA 0000004A R		mov edx, OFFSET hardcodeString
 00000037  E8 00000091			call strcat
 0000003C  BA 0000026B R		mov edx, OFFSET msg1
 00000041  E8 00000000 E		call WriteString	; Print msg1
 00000046  8B D7			mov edx, edi		; Move the address in EDI to EDX
 00000048  E8 00000000 E		call WriteString	; Print output of strcat
 0000004D  E8 00000000 E		call Crlf			; Print end line character.
					; -------------------------------------------------------------


					; -------------------------------------------------------------
					; Code block for calling strrep and printing results to screen.
 00000052  BF 00000058 R		mov edi, OFFSET newString
 00000057  BE 00000058 R		mov esi, OFFSET newString
 0000005C  B8 00000003			mov eax, 3
 00000061  E8 00000090			call strrep
 00000066  BA 00000280 R		mov edx, OFFSET msg2
 0000006B  E8 00000000 E		call WriteString	; Print msg2
 00000070  8B D7			mov edx, edi		; Move the address in EDI to EDX
 00000072  E8 00000000 E		call WriteString	; Print output of strcat
 00000077  E8 00000000 E		call Crlf			; Print end line character.
					; -------------------------------------------------------------


					; -------------------------------------------------------------
					; Code block for calling strlower and printing results to screen.
 0000007C  BF 00000058 R		mov edi, OFFSET newString
 00000081  BE 00000058 R		mov esi, OFFSET newString
 00000086  E8 000000A9			call strlower
 0000008B  BA 00000295 R		mov edx, OFFSET msg3
 00000090  E8 00000000 E		call WriteString	; Print msg3
 00000095  8B D7			mov edx, edi		; Move the address in EDI to EDX
 00000097  E8 00000000 E		call WriteString	; Print output of strcat
 0000009C  E8 00000000 E		call Crlf			; Print end line character.
					; -------------------------------------------------------------


					; -------------------------------------------------------------
					; Code block for calling strlower and printing results to screen.
 000000A1  BF 00000058 R		mov edi, OFFSET newString
 000000A6  BE 00000058 R		mov esi, OFFSET newString
 000000AB  E8 000000A9			call strupper
 000000B0  BA 000002AA R		mov edx, OFFSET msg4
 000000B5  E8 00000000 E		call WriteString	; Print msg4
 000000BA  8B D7			mov edx, edi		; Move the address in EDI to EDX
 000000BC  E8 00000000 E		call WriteString	; Print output of strcat
 000000C1  E8 00000000 E		call Crlf			; Print end line character.
					; -------------------------------------------------------------


					exit
 000000C6  6A 00	   *	    push   +000000000h
 000000C8  E8 00000000 E   *	    call   ExitProcess
 000000CD			main ENDP




				; [strcat] -----------------------------------------------------------
 000000CD			strcat PROC
 000000CD  8B DF			mov ebx, edi					;Store original OFFSET of edi in ebx
					INVOKE Str_length, esi
 000000CF  56		   *	    push   esi
 000000D0  E8 00000000 E   *	    call   Str_length
 000000D5  8B C8			mov ecx, eax					; Loop Counter
					
 000000D7			L1:
 000000D7  8A 06			mov al, [esi]					; Get a char from input string
 000000D9  3C 00			cmp al, 00h						; If encounter a null terminator, jump & start copy of hardcode string
 000000DB  74 06			je Next
 000000DD  88 07			mov [edi], al					; Store it in the new String
 000000DF  46				inc esi
 000000E0  47				inc edi
 000000E1  E2 F4			loop L1

 000000E3			Next:
					INVOKE Str_length, edx
 000000E3  52		   *	    push   edx
 000000E4  E8 00000000 E   *	    call   Str_length
 000000E9  8B C8			mov ecx, eax					; Loop Counter
					
 000000EB			L2:
 000000EB  8A 02			mov al, [edx]					; Get a char from Hardcode string
 000000ED  88 07			mov [edi], al					; Store it in the new String
 000000EF  42				inc edx
 000000F0  47				inc edi
 000000F1  E2 F8			loop L2
					
 000000F3  8B FB			mov edi, ebx					; Return Stored OFFSET of edi back to edi
 000000F5  C3				ret
 000000F6			strcat ENDP
				; [END OF strcat] -----------------------------------------------------------



				; [strrep] -----------------------------------------------------------
 000000F6			strrep PROC
 000000F6  8B D0			mov edx, eax					; Store eax value(reptition) in edx
 000000F8  83 FA 00			cmp edx, 0						; If there are no reptition, return
 000000FB  7E 30			jle Done						

 000000FD  8B EF			mov ebp, edi					; Store original OFFSET of edi in ebp
 000000FF  BB 00000000			mov ebx, 0						; Holds the amount of char in original input string
					INVOKE Str_length, edi
 00000104  57		   *	    push   edi
 00000105  E8 00000000 E   *	    call   Str_length
 0000010A  8B C8			mov ecx, eax					; Loop counter
					
 0000010C			L1:
 0000010C  8A 06			mov al, [esi]					; Reptition String 1 time
 0000010E  3C 00			cmp al, 00h
 00000110  74 07			je Next
 00000112  88 07			mov [edi], al
 00000114  47				inc edi
 00000115  46				inc esi
 00000116  43				inc ebx
 00000117  E2 F3			loop L1

 00000119			Next:								; EBX now holds the total amount of char in the original input string (ESI)
 00000119  4A				dec edx							; Since we already did Loop L1, reptition minus 1
 0000011A  83 FA 00			cmp edx, 0
 0000011D  7E 0E			jle Done						; If no more reptition go to Done/return
 0000011F  8B F5			mov esi, ebp					; Return original OFFSET of edi
 00000121  8B CB			mov ecx, ebx

 00000123			L2:									; WHile Reptition are left, keep reptiting
 00000123  8A 06			mov al, [esi]
 00000125  88 07			mov [edi], al
 00000127  47				inc edi
 00000128  46				inc esi
 00000129  E2 F8			loop L2
 0000012B  E2 EC			loop Next
					
 0000012D			Done:
 0000012D  B0 00			mov al, 00h
 0000012F  88 07			mov [edi], al					; Add null terminator to end of new created string
 00000131  8B FD			mov edi, ebp					; Return EDI pointing to beginning of new created String
 00000133  C3				ret
 00000134			strrep ENDP
				; [END OF strrep] -----------------------------------------------------------



				; [strlower] -----------------------------------------------------------
 00000134			strlower PROC
 00000134  8B EE			mov ebp, esi					; Store Original OFFSET of ESI
					INVOKE Str_length, edi		
 00000136  57		   *	    push   edi
 00000137  E8 00000000 E   *	    call   Str_length
 0000013C  8B C8			mov ecx, eax					; Loop counter

 0000013E			L1:									; Uppercase char get alter (values: 41h to 5Ah)
 0000013E  8A 06			mov al, [esi]					; Store a char from input string
 00000140  3C 41			cmp al, 41h					
 00000142  72 0C			jb Next							; If al < 41h ...not a Uppercase Letter jump to Next
 00000144  3C 5A			cmp al, 5Ah
 00000146  77 08			ja Next							; If al > 5Ah ... not a Uppercase letter Jump to Next

 00000148  0C 20			or al, 00100000b				; Change al to Lowercase
 0000014A  88 07			mov [edi], al					; Store it
 0000014C  46				inc esi
 0000014D  47				inc edi
 0000014E  E2 EE			loop L1

 00000150			Next:								; For non-uppercase char just store it, no altering
 00000150  88 07			mov [edi], al
 00000152  47				inc edi
 00000153  46				inc esi
 00000154  E2 E8			loop L1

 00000156  8B FD			mov edi, ebp					; Return original OFFSET pointing to beginning of new created String
 00000158  C3				ret
 00000159			strlower ENDP
				; [END OF strlower] -----------------------------------------------------------



				; [strupper] -----------------------------------------------------------
 00000159			strupper PROC
 00000159  8B EE			mov ebp, esi					; Store original OFFSET
					INVOKE Str_length, edi
 0000015B  57		   *	    push   edi
 0000015C  E8 00000000 E   *	    call   Str_length
 00000161  8B C8			mov ecx, eax					; Loop counter

 00000163			L1:									; Lowercase char get alter (values: 61h to 7Ah)
 00000163  8A 06			mov al, [esi]					; Store a char from input string
 00000165  3C 61			cmp al, 61h					
 00000167  72 0C			jb Next							; If al < 61h ...not a Lowercase Letter jump to Next
 00000169  3C 7A			cmp al, 7Ah
 0000016B  77 08			ja Next							; If al > 7Ah ... not a Lowercase letter Jump to Next

 0000016D  24 DF			and al, 11011111b				; Change al to UpperCase
 0000016F  88 07			mov [edi], al					; Store it
 00000171  46				inc esi
 00000172  47				inc edi
 00000173  E2 EE			loop L1

 00000175			Next:								; For non-lowercase char just store it, no altering
 00000175  88 07			mov [edi], al
 00000177  47				inc edi
 00000178  46				inc esi
 00000179  E2 E8			loop L1

 0000017B  8B FD			mov edi, ebp					; Return OFFSET pointing to beginning of new created String
 0000017D  BA 000002BF R		mov edx, OFFSET myName			; Print my name and R number
 00000182  E8 00000000 E		call WriteString
 00000187  E8 00000000 E		call Crlf

 0000018C  C3				ret
 0000018D			strupper ENDP
				; [END OF strupper] -----------------------------------------------------------

				END main
Microsoft (R) Macro Assembler Version 14.27.29111.0	    04/20/21 21:19:45
Assignment_4.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002ED Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000018D Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000CD Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
strcat . . . . . . . . . . . . .	P Near	 000000CD _TEXT	Length= 00000029 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000000D7 _TEXT	
  Next . . . . . . . . . . . . .	L Near	 000000E3 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000000EB _TEXT	
strlower . . . . . . . . . . . .	P Near	 00000134 _TEXT	Length= 00000025 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000013E _TEXT	
  Next . . . . . . . . . . . . .	L Near	 00000150 _TEXT	
strrep . . . . . . . . . . . . .	P Near	 000000F6 _TEXT	Length= 0000003E Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000010C _TEXT	
  Next . . . . . . . . . . . . .	L Near	 00000119 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000123 _TEXT	
  Done . . . . . . . . . . . . .	L Near	 0000012D _TEXT	
strupper . . . . . . . . . . . .	P Near	 00000159 _TEXT	Length= 00000034 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000163 _TEXT	
  Next . . . . . . . . . . . . .	L Near	 00000175 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hardcodeString . . . . . . . . .	Byte	 0000004A _DATA	
inputString  . . . . . . . . . .	Byte	 00000018 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
msg1 . . . . . . . . . . . . . .	Byte	 0000026B _DATA	
msg2 . . . . . . . . . . . . . .	Byte	 00000280 _DATA	
msg3 . . . . . . . . . . . . . .	Byte	 00000295 _DATA	
msg4 . . . . . . . . . . . . . .	Byte	 000002AA _DATA	
myName . . . . . . . . . . . . .	Byte	 000002BF _DATA	
newString  . . . . . . . . . . .	Byte	 00000058 _DATA	
prompt . . . . . . . . . . . . .	Byte	 0000024C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
textString . . . . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
